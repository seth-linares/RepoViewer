# .github/workflows/release.yml
#
# This workflow automatically builds RepoViewer for multiple platforms and creates
# a GitHub release whenever you push a version tag (e.g., v2.1.0).
#
# Since we're using rustls, we don't need any platform-specific SSL setup,
# which makes this workflow much simpler and more reliable.

name: Release

# Trigger on version tags
on:
  push:
    tags:
      - 'v*'

# Allow the workflow to create releases and upload assets
permissions:
  contents: write

jobs:
  # Job 1: Create the GitHub release that will host our binaries
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: RepoViewer ${{ github.ref_name }}
          # Start with prerelease for testing, change to false for production
          prerelease: true
          draft: false
          body: |
            # RepoViewer ${{ github.ref_name }}

            ## ðŸŽ‰ What's New
            
            - Self-update functionality! Run `RepoViewer --update` to automatically update to the latest version
            - [Add other new features here]
            
            ## ðŸ“¦ Installation
            
            ### Quick Install (Unix-like systems)
            
            ```bash
            # Download for your platform (example for Linux x64)
            curl -L https://github.com/seth-linares/RepoViewer/releases/download/${{ github.ref_name }}/RepoViewer-${{ github.ref_name }}-x86_64-unknown-linux-gnu -o RepoViewer
            chmod +x RepoViewer
            sudo mv RepoViewer /usr/local/bin/
            ```
            
            ### Windows
            
            Download the `.exe` file for your architecture and add it to your PATH.
            
            ## ðŸ”„ Updating
            
            If you have RepoViewer v2.1.0 or later installed:
            
            ```bash
            RepoViewer --update
            ```
            
            ## ðŸ“‹ Checksums
            
            SHA256 checksums are available in `checksums.txt` for verification.

    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

  # Job 2: Build binaries for each platform
  build-and-upload:
    name: Build and Upload
    needs: create-release
    strategy:
      matrix:
        include:
          # Windows x64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: Windows x64

          # Linux x64 (most common)
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: Linux x64

          # macOS Intel
          - target: x86_64-apple-darwin
            os: macos-latest
            name: macOS Intel

          # macOS Apple Silicon (ARM64)
          - target: aarch64-apple-darwin
            os: macos-latest
            name: macOS Apple Silicon

    runs-on: ${{ matrix.os }}

    steps:
      # Get the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Install Rust with the specific target
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      # Cache dependencies for faster builds
      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-

      # Build the binary
      # The --locked flag ensures we use exact versions from Cargo.lock
      - name: Build
        run: cargo build --release --locked --target ${{ matrix.target }}

      # Prepare the binary with the correct name for self_update
      - name: Prepare binary
        shell: bash
        run: |
          # Navigate to the output directory
          cd target/${{ matrix.target }}/release
          
          # Determine the binary name based on platform
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            BINARY_NAME="RepoViewer.exe"
            FINAL_NAME="RepoViewer-${{ github.ref_name }}-${{ matrix.target }}.exe"
          else
            BINARY_NAME="RepoViewer"
            FINAL_NAME="RepoViewer-${{ github.ref_name }}-${{ matrix.target }}"
          fi
          
          # Rename and prepare for upload
          mv "$BINARY_NAME" "$FINAL_NAME"
          chmod +x "$FINAL_NAME"
          
          # Move to workspace root
          mv "$FINAL_NAME" "${{ github.workspace }}/"
          
          # Save the final name for upload
          echo "ASSET_NAME=$FINAL_NAME" >> $GITHUB_ENV
          
          # Also save for checksum generation
          echo "$FINAL_NAME" >> "${{ github.workspace }}/built_binaries.txt"

      # Upload the binary to the release
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          # We define ASSET_NAME above so ignore this
          asset_path: ./${{ env.ASSET_NAME }}
          asset_name: ${{ env.ASSET_NAME }}
          asset_content_type: ${{ matrix.os == 'windows-latest' && 'application/vnd.microsoft.portable-executable' || 'application/octet-stream' }}

  # Job 3: Generate checksums for security verification
  generate-checksums:
    name: Generate Checksums
    needs: [create-release, build-and-upload]
    runs-on: ubuntu-latest
    steps:
      - name: Setup checksum generation
        run: |
          mkdir -p downloads
          echo "Starting checksum generation for RepoViewer ${{ github.ref_name }}"

      - name: Download release assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get release data from GitHub API
          RELEASE_ID=$(curl -s \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.ref_name }}" \
            | jq -r '.id')
          
          # Download each RepoViewer binary
          curl -s \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID/assets" \
            | jq -r '.[] | select(.name | startswith("RepoViewer-")) | .url' \
            | while read -r url; do
                # Extract filename from the API response
                FILENAME=$(curl -s \
                  -H "Authorization: token $GITHUB_TOKEN" \
                  -H "Accept: application/vnd.github.v3+json" \
                  "$url" | jq -r '.name')
                
                echo "Downloading $FILENAME..."
                curl -L \
                  -H "Authorization: token $GITHUB_TOKEN" \
                  -H "Accept: application/octet-stream" \
                  "$url" \
                  -o "downloads/$FILENAME"
              done

      - name: Generate checksums
        run: |
          cd downloads
          
          # Generate SHA256 checksums
          sha256sum RepoViewer-* > checksums.txt
          
          # Display for verification
          echo "Generated checksums:"
          cat checksums.txt
          
          # Move to workspace root
          mv checksums.txt ../

      - name: Upload checksums
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./checksums.txt
          asset_name: checksums.txt
          asset_content_type: text/plain