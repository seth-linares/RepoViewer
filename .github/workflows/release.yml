# .github/workflows/release.yml
#
# To release: 
# 1. git tag v1.0.1-test
# 2. git push origin v1.0.1-test
#
# To delete release:
# 1. git push --delete origin v1.0.1-test
# 2. git tag -d v1.0.1-test
#
# Make final release:
# prerelease: true
# ^^^^^^^^^^^^
# TRUE = PRE-RELEASE, FALSE = RELEASE

name: Release

# Trigger on version tags
on:
  push:
    tags:
      - 'v*'

# Allow the workflow to create releases and upload assets
permissions:
  contents: write

jobs:
  # Job 1: Create the GitHub release that will host our binaries
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref_name }}
          name: RepoViewer ${{ github.ref_name }}
          prerelease: true
          draft: false
          generateReleaseNotes: false
          body: |
            # RepoViewer ${{ github.ref_name }}

            ## ðŸŽ‰ What's New
            
            - Self-update functionality! Run `RepoViewer --update` to automatically update to the latest version
            - [Add other new features here]
            
            ## ðŸ“¦ Installation

            These releases are primarily for the self-updating feature. I would recommend using the command below to ensure the binary you run is
            the same as the open and visible code you can see in this repo. Please don't download and run random binaries without knowing the source code.
            
            ```bash
            cargo install --git https://github.com/seth-linares/RepoViewer
            ```
            
            ## ðŸ”„ Updating
            
            If you have RepoViewer with self-update support:
            
            ```bash
            RepoViewer --update
            ```
            
            Or check for updates without installing:
            
            ```bash
            RepoViewer --check-update
            ```
            
            ## ðŸ“‹ Checksums
            
            SHA256 checksums are available in `checksums.txt` for verification.

  # Job 2: Build binaries for each platform
  build-and-upload:
    name: Build and Upload - ${{ matrix.name }}
    needs: create-release
    strategy:
      matrix:
        include:
          # Windows x64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: Windows x64

          # Linux x64 (most common)
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: Linux x64

          # Linux ARM64 (AWS Graviton, Raspberry Pi 4/5)
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: Linux ARM64
            use_cross: true

          # macOS Intel
          - target: x86_64-apple-darwin
            os: macos-latest
            name: macOS Intel

          # macOS Apple Silicon (ARM64)
          - target: aarch64-apple-darwin
            os: macos-latest
            name: macOS Apple Silicon

    runs-on: ${{ matrix.os }}

    steps:
      # Get the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Install Rust with the specific target
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      # Cache dependencies for faster builds
      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-

      # Install cross if needed for cross-compilation
      - name: Install cross
        if: matrix.use_cross == true
        run: |
          # Download pre-built cross binary for faster installation
          curl -L https://github.com/cross-rs/cross/releases/download/v0.2.5/cross-x86_64-unknown-linux-gnu.tar.gz | tar xz
          sudo mv cross /usr/local/bin/
          cross --version

      # Run tests (native platforms only)
      - name: Run tests
        if: matrix.use_cross != true
        run: cargo test --target ${{ matrix.target }}

      # Build the binary
      # Use cross for targets that need cross-compilation, cargo for native
      - name: Build
        run: |
          if [[ "${{ matrix.use_cross }}" == "true" ]]; then
            cross build --release --locked --target ${{ matrix.target }}
          else
            cargo build --release --locked --target ${{ matrix.target }}
          fi
        shell: bash

      # Prepare the binary with the correct name for self_update
      - name: Prepare binary
        shell: bash
        run: |
          # Navigate to the output directory
          cd target/${{ matrix.target }}/release
          
          # Determine the binary name based on platform
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            BINARY_NAME="RepoViewer.exe"
            FINAL_NAME="RepoViewer-${{ github.ref_name }}-${{ matrix.target }}.exe"
          else
            BINARY_NAME="RepoViewer"
            FINAL_NAME="RepoViewer-${{ github.ref_name }}-${{ matrix.target }}"
          fi
          
          # Verify binary exists
          if [[ ! -f "$BINARY_NAME" ]]; then
            echo "Error: Binary $BINARY_NAME not found!"
            ls -la
            exit 1
          fi
          
          # Rename and prepare for upload
          mv "$BINARY_NAME" "$FINAL_NAME"
          chmod +x "$FINAL_NAME"
          
          # Move to workspace root
          mv "$FINAL_NAME" "${{ github.workspace }}/"
          
          # Save the final name for upload
          echo "ASSET_NAME=$FINAL_NAME" >> $GITHUB_ENV
          
          # Verify the file was moved successfully
          if [[ ! -f "${{ github.workspace }}/$FINAL_NAME" ]]; then
            echo "Error: Failed to move binary to workspace!"
            exit 1
          fi
          
          echo "Binary prepared: $FINAL_NAME"

      # Upload the binary to the release
      - name: Upload Release Asset
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          # ASSET_NAME DEFINED ABOVE^^^^^^^
          artifacts: ${{ env.ASSET_NAME }}
          artifactContentType: ${{ matrix.os == 'windows-latest' && 'application/vnd.microsoft.portable-executable' || 'application/octet-stream' }}
          omitBodyDuringUpdate: true
          omitNameDuringUpdate: true
          omitPrereleaseDuringUpdate: true
          tag: ${{ github.ref_name }}

  # Job 3: Generate checksums for security verification
  generate-checksums:
    name: Generate Checksums
    needs: [create-release, build-and-upload]
    runs-on: ubuntu-latest
    steps:
      - name: Setup checksum generation
        run: |
          mkdir -p downloads
          echo "Starting checksum generation for RepoViewer ${{ github.ref_name }}"

      - name: Download release assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get release data from GitHub API
          RELEASE_ID=$(curl -s \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.ref_name }}" \
            | jq -r '.id')
          
          echo "Release ID: $RELEASE_ID"
          
          # Download each RepoViewer binary
          curl -s \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID/assets" \
            | jq -r '.[] | select(.name | startswith("RepoViewer-")) | .url' \
            | while read -r url; do
                # Extract filename from the API response
                FILENAME=$(curl -s \
                  -H "Authorization: token $GITHUB_TOKEN" \
                  -H "Accept: application/vnd.github.v3+json" \
                  "$url" | jq -r '.name')
                
                echo "Downloading $FILENAME..."
                curl -L \
                  -H "Authorization: token $GITHUB_TOKEN" \
                  -H "Accept: application/octet-stream" \
                  "$url" \
                  -o "downloads/$FILENAME"
              done

      - name: Generate checksums
        run: |
          cd downloads
          
          # Verify we have files
          if ! ls RepoViewer-* 1> /dev/null 2>&1; then
            echo "Error: No RepoViewer binaries found!"
            ls -la
            exit 1
          fi
          
          # Generate SHA256 checksums
          sha256sum RepoViewer-* > checksums.txt
          
          # Display for verification
          echo "Generated checksums:"
          cat checksums.txt
          
          # Move to workspace root
          mv checksums.txt ../

      - name: Upload checksums
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifacts: checksums.txt
          artifactContentType: text/plain
          omitBodyDuringUpdate: true
          omitNameDuringUpdate: true
          omitPrereleaseDuringUpdate: true
          tag: ${{ github.ref_name }}